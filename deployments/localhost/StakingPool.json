{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keyGenerator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ssv_contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ssv_token",
          "type": "address"
        },
        {
          "internalType": "uint32[4]",
          "name": "ids",
          "type": "uint32[4]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "sharesPublicKeys",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "KeySharesDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32[4]",
          "name": "newOperators",
          "type": "uint32[4]"
        }
      ],
      "name": "OperatorIDsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "PubKeyDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "SharePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserStaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Oracle_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSV_CONTRACT_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSV_TOKEN_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Validators",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WhitelistKeyGenerator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pubkey",
          "type": "bytes"
        },
        {
          "internalType": "uint32[]",
          "name": "_operatorIds",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_sharesPublicKeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_sharesEncrypted",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "depositValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperators",
      "outputs": [
        {
          "internalType": "uint32[4]",
          "name": "",
          "type": "uint32[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareprice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidators",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssvETH",
      "outputs": [
        {
          "internalType": "contract SSVETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBeaconRewards",
          "type": "uint256"
        }
      ],
      "name": "updateBeaconRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[4]",
          "name": "_newOperators",
          "type": "uint32[4]"
        }
      ],
      "name": "updateOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x82d444764c18badcc27546a7bca21ef65cc1ce14b1f9bcd8c0223724454df934",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3887920",
    "logsBloom": "0x
    "blockHash": "0xc921b1e5b7c332b0fd31bea740ab23e8df1746ae66c0e82ed7859a528a2efc94",
    "transactionHash": "0x82d444764c18badcc27546a7bca21ef65cc1ce14b1f9bcd8c0223724454df934",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x82d444764c18badcc27546a7bca21ef65cc1ce14b1f9bcd8c0223724454df934",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc921b1e5b7c332b0fd31bea740ab23e8df1746ae66c0e82ed7859a528a2efc94"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x82d444764c18badcc27546a7bca21ef65cc1ce14b1f9bcd8c0223724454df934",
        "address": "0xd8058efe0198ae9dD7D563e1b4938Dcbc86A1F81",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf7ed3acca5a467e9e704c703e8d87f634fb0fc9"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc921b1e5b7c332b0fd31bea740ab23e8df1746ae66c0e82ed7859a528a2efc94"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "3887920",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    [
      1,
      2,
      9,
      42
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "838418d62feb9b137ea813c8013a37c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyGenerator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ssv_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ssv_token\",\"type\":\"address\"},{\"internalType\":\"uint32[4]\",\"name\":\"ids\",\"type\":\"uint32[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"sharesPublicKeys\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KeySharesDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[4]\",\"name\":\"newOperators\",\"type\":\"uint32[4]\"}],\"name\":\"OperatorIDsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"PubKeyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"SharePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Oracle_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSV_CONTRACT_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSV_TOKEN_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Validators\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhitelistKeyGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint32[]\",\"name\":\"_operatorIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_sharesPublicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_sharesEncrypted\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"depositValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"uint32[4]\",\"name\":\"\",\"type\":\"uint32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssvETH\",\"outputs\":[{\"internalType\":\"contract SSVETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBeaconRewards\",\"type\":\"uint256\"}],\"name\":\"updateBeaconRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[4]\",\"name\":\"_newOperators\",\"type\":\"uint32[4]\"}],\"name\":\"updateOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositShares(bytes,uint32[],bytes[],bytes[],uint256)\":{\"details\":\"Callable by the whitelisted address\",\"params\":{\"_amount\":\": Amount of tokens to be deposited\",\"_operatorIds\":\": IDs of the validator's operators\",\"_pubkey\":\": Public key of the validator\",\"_sharesEncrypted\":\": Encrypted shares\",\"_sharesPublicKeys\":\": Public keys of the shares\"}},\"depositValidator(bytes,bytes,bytes,bytes32)\":{\"details\":\"these params together are known as the DepositData\",\"params\":{\"_deposit_data_root\":\": The SHA-256 hash of the SSZ-encoded DepositData object\",\"_pubkey\":\": Public key of the validator\",\"_signature\":\": BLS12-381 signature of the deposit data\",\"_withdrawal_credentials\":\": Withdrawal public key of the validator\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unStake(uint256)\":{\"params\":{\"_amount\":\": Amount to be unstaked\"}},\"updateBeaconRewards(uint256)\":{\"details\":\"Update share price of the staking pool\",\"params\":{\"_newBeaconRewards\":\": The new beacon rewards amount\"}},\"updateOperators(uint32[4])\":{\"details\":\"Update operators\",\"params\":{\"_newOperators\":\": Array of the the new operators Ids\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositShares(bytes,uint32[],bytes[],bytes[],uint256)\":{\"notice\":\"Deposit shares for a validator\"},\"depositValidator(bytes,bytes,bytes,bytes32)\":{\"notice\":\"Deposit a validator to the deposit contract\"},\"getOperators()\":{\"notice\":\"Get operator ids, check operators here https://explorer.ssv.network/\"},\"getShareprice()\":{\"notice\":\"Get share price\"},\"getUserStake(address)\":{\"notice\":\"Get user's staked amount\"},\"getValidators()\":{\"notice\":\"Get validators array\"},\"stake()\":{\"notice\":\"Stake tokens\"},\"unStake(uint256)\":{\"notice\":\"Unstake tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SSVETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SSVETH is ERC20, Ownable {\\n    address public minter;\\n    uint256 public sharePrice = 1e18;\\n    \\n    // ICommon immutable CommonContract;\\n    constructor() ERC20(\\\"decentralize staking with ssv\\\", \\\"ssvETH\\\"){\\n        minter = msg.sender;\\n    }\\n\\n\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        _mint(recipient, amount);\\n    }\\n\\n    function changeSharePrice(uint256 new_price) external onlyOwner {\\n        sharePrice = new_price;\\n    }\\n\\n}\",\"keccak256\":\"0xd4913a8b3102fbd4db5391f986f00a5933f1a111842787d2be47a68a9de2a984\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/ISSVNetwork.sol\\\";\\nimport \\\"./SSVETH.sol\\\";\\n\\ncontract StakingPool is Ownable, ReentrancyGuard {\\n    address public WhitelistKeyGenerator;\\n    address public WITHDRAWAL_ADDRESS;\\n    IDepositContract immutable DepositContract;\\n    SSVETH public ssvETH;\\n    uint256 public immutable VALIDATOR_AMOUNT = 32 * 1e18;\\n    address public SSV_TOKEN_ADDR;\\n    address public SSV_CONTRACT_ADDR;\\n    uint32[4] OperatorIDs;\\n    bytes[] public Validators;\\n    address public Oracle_address;\\n    \\n    uint256 beaconRewards;\\n    uint256 executionRewards;\\n\\n    mapping(address => uint256) private userStake;\\n\\n    event UserStaked(address user_address, uint256 amount);\\n    event PubKeyDeposited(bytes pubkey);\\n    event OperatorIDsChanged(uint32[4] newOperators);\\n    event SharePriceUpdated(uint256 newPrice);\\n    event KeySharesDeposited(\\n        bytes pubkey,\\n        bytes[] sharesPublicKeys,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address keyGenerator,\\n        address depositAddress,\\n        address withdrawal,\\n        address ssv_contract,\\n        address ssv_token,\\n        uint32[4] memory ids\\n    ) {\\n        WITHDRAWAL_ADDRESS = withdrawal;\\n        WhitelistKeyGenerator = keyGenerator;\\n        DepositContract = IDepositContract(depositAddress);\\n        SSVETH _ssvETH = new SSVETH();\\n        ssvETH = SSVETH(address(_ssvETH));\\n        SSV_CONTRACT_ADDR = ssv_contract;\\n        SSV_TOKEN_ADDR = ssv_token;\\n        OperatorIDs = ids;\\n    }\\n\\n    /**\\n     * @notice Get operator ids, check operators here https://explorer.ssv.network/\\n     */\\n    function getOperators() public view returns (uint32[4] memory) {\\n        return OperatorIDs;\\n    }\\n\\n    /**\\n     * @notice Get validators array\\n     */\\n    function getValidators() public view returns (bytes[] memory) {\\n        return Validators;\\n    }\\n\\n    /**\\n     * @notice Get user's staked amount\\n     */\\n    function getUserStake(address _userAddress) public view returns (uint256) {\\n        return userStake[_userAddress];\\n    }\\n\\n    /**\\n     * @notice Get share price\\n     */\\n    function getShareprice() public view returns (uint256) {\\n        uint256 _sharePrice = ssvETH.sharePrice();\\n        return _sharePrice;\\n    }\\n\\n    /**\\n     * @dev Update operators\\n     * @param _newOperators: Array of the the new operators Ids\\n     */\\n    function updateOperators(uint32[4] memory _newOperators) public onlyOwner {\\n        OperatorIDs = _newOperators;\\n        emit OperatorIDsChanged(_newOperators);\\n    }\\n\\n    /**\\n     * @dev Update share price of the staking pool\\n     * @param _newBeaconRewards: The new beacon rewards amount\\n     */\\n    function updateBeaconRewards(uint256 _newBeaconRewards) external onlyOwner {\\n        beaconRewards = _newBeaconRewards;\\n        uint256 _newSharePrice = (beaconRewards +\\n            executionRewards +\\n            (Validators.length * 32)) / (Validators.length * 32);\\n        updateSharePrice(_newSharePrice);\\n    }\\n\\n    /**\\n     * @notice Stake tokens\\n     */\\n\\n    function stake() public payable {\\n        require(msg.value > 0, \\\"Can't stake zero amount\\\");\\n        uint256 amount_minted = (msg.value * ssvETH.sharePrice()) / 1e18;\\n        ssvETH.mint(msg.sender, amount_minted);\\n        emit UserStaked(msg.sender, msg.value);\\n        userStake[msg.sender] = msg.value;\\n    }\\n\\n    /**\\n     * @notice Unstake tokens\\n     * @param _amount: Amount to be unstaked\\n     */\\n    function unStake(uint256 _amount) public {\\n        ssvETH.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _amount_to_transfer = (_amount / ssvETH.sharePrice()) * 1e18;\\n        payable(msg.sender).transfer(_amount_to_transfer);\\n        delete userStake[msg.sender];\\n    }\\n\\n    /**\\n     * @notice Deposit a validator to the deposit contract\\n     * @dev these params together are known as the DepositData\\n     * @param _pubkey: Public key of the validator\\n     * @param _withdrawal_credentials: Withdrawal public key of the validator\\n     * @param _signature: BLS12-381 signature of the deposit data\\n     * @param _deposit_data_root: The SHA-256 hash of the SSZ-encoded DepositData object\\n     */\\n    function depositValidator(\\n        bytes calldata _pubkey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external {\\n        // Deposit the validator to the deposit contract\\n        DepositContract.deposit{value: VALIDATOR_AMOUNT}(\\n            _pubkey,\\n            _withdrawal_credentials,\\n            _signature,\\n            _deposit_data_root\\n        );\\n        // Emit an event to log the deposit of the public key\\n        emit PubKeyDeposited(_pubkey);\\n    }\\n\\n    /**\\n     * @notice Deposit shares for a validator\\n     * @param _pubkey: Public key of the validator\\n     * @param _operatorIds: IDs of the validator's operators\\n     * @param _sharesPublicKeys: Public keys of the shares\\n     * @param _sharesEncrypted: Encrypted shares\\n     * @param _amount: Amount of tokens to be deposited\\n     * @dev Callable by the whitelisted address\\n     */\\n    function depositShares(\\n        bytes calldata _pubkey,\\n        uint32[] calldata _operatorIds,\\n        bytes[] calldata _sharesPublicKeys,\\n        bytes[] calldata _sharesEncrypted,\\n        uint256 _amount\\n    ) external {\\n        // Check if the message sender is the whitelisted address\\n        require(\\n            msg.sender == WhitelistKeyGenerator,\\n            \\\"Only whitelisted address can submit the key\\\"\\n        );\\n        // Approve the transfer of tokens to the SSV contract\\n        IERC20(SSV_TOKEN_ADDR).approve(SSV_CONTRACT_ADDR, _amount);\\n        // Register the validator and deposit the shares\\n        ISSVNetwork(SSV_CONTRACT_ADDR).registerValidator(\\n            _pubkey,\\n            _operatorIds,\\n            _sharesPublicKeys,\\n            _sharesEncrypted,\\n            _amount\\n        );\\n        // Add the public key to the list of validators\\n        Validators.push(_pubkey);\\n        // Emit an event to log the deposit of shares\\n        emit KeySharesDeposited(_pubkey, _sharesPublicKeys, _amount);\\n    }\\n\\n    /**\\n     * @notice update execution rewards\\n     * @param _newExecutionRewards:  Execution rewards amount added\\n     */\\n    function updateExecutionRewards(uint256 _newExecutionRewards) internal {\\n        executionRewards += _newExecutionRewards;\\n    }\\n\\n    /**\\n     * @dev Update share price of the staking pool\\n     * @param _newSharePrice: The new share price amount\\n     */\\n    function updateSharePrice(uint256 _newSharePrice) internal {\\n        ssvETH.changeSharePrice(_newSharePrice);\\n        emit SharePriceUpdated(_newSharePrice);\\n    }\\n\\n    // called when the contract receives eth\\n    receive() external payable {\\n        updateExecutionRewards(msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xe9dca0b42b479ab6ee23f50bae0addf42773c455ecb4e654d723b1d12461cb76\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\",\"keccak256\":\"0xd61465297125deeb6176a3be68346de01719d1d8f7c255c537d18ddf33eb952f\",\"license\":\"MIT\"},\"contracts/interfaces/ISSVNetwork.sol\":{\"content\":\"// File: contracts/ISSVNetwork.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ISSVRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISSVNetwork {\\n    /**\\n     * @dev Emitted when the account has been enabled.\\n     * @param ownerAddress Operator's owner.\\n     */\\n    event AccountEnable(address indexed ownerAddress);\\n\\n    /**\\n     * @dev Emitted when the account has been liquidated.\\n     * @param ownerAddress Operator's owner.\\n     */\\n    event AccountLiquidation(address indexed ownerAddress);\\n\\n    /**\\n     * @dev Emitted when the operator has been added.\\n     * @param id operator's ID.\\n     * @param name Operator's display name.\\n     * @param ownerAddress Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee Operator's initial fee.\\n     */\\n    event OperatorRegistration(\\n        uint32 indexed id,\\n        string name,\\n        address indexed ownerAddress,\\n        bytes publicKey,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted when the operator has been removed.\\n     * @param operatorId operator's ID.\\n     * @param ownerAddress Operator's owner.\\n     */\\n    event OperatorRemoval(uint32 operatorId, address indexed ownerAddress);\\n\\n    event OperatorFeeDeclaration(\\n        address indexed ownerAddress,\\n        uint32 operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n\\n    event DeclaredOperatorFeeCancelation(address indexed ownerAddress, uint32 operatorId);\\n\\n    /**\\n     * @dev Emitted when an operator's fee is updated.\\n     * @param ownerAddress Operator's owner.\\n     * @param blockNumber from which block number.\\n     * @param fee updated fee value.\\n     */\\n    event OperatorFeeExecution(\\n        address indexed ownerAddress,\\n        uint32 operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted when an operator's score is updated.\\n     * @param operatorId operator's ID.\\n     * @param ownerAddress Operator's owner.\\n     * @param blockNumber from which block number.\\n     * @param score updated score value.\\n     */\\n    event OperatorScoreUpdate(\\n        uint32 operatorId,\\n        address indexed ownerAddress,\\n        uint256 blockNumber,\\n        uint256 score\\n    );\\n\\n    /**\\n     * @dev Emitted when the validator has been added.\\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\\n     * @param publicKey The public key of a validator.\\n     * @param operatorIds The operators public keys list for this validator.\\n     * @param sharesPublicKeys The shared publick keys list for this validator.\\n     * @param encryptedKeys The encrypted keys list for this validator.\\n     */\\n    event ValidatorRegistration(\\n        address indexed ownerAddress,\\n        bytes publicKey,\\n        uint32[] operatorIds,\\n        bytes[] sharesPublicKeys,\\n        bytes[] encryptedKeys\\n    );\\n\\n    /**\\n     * @dev Emitted when the validator is removed.\\n     * @param ownerAddress Validator's owner.\\n     * @param publicKey The public key of a validator.\\n     */\\n    event ValidatorRemoval(address indexed ownerAddress, bytes publicKey);\\n\\n    /**\\n     * @dev Emitted when an owner deposits funds.\\n     * @param value Amount of tokens.\\n     * @param ownerAddress Owner's address.\\n     * @param senderAddress Sender's address.\\n     */\\n    event FundsDeposit(uint256 value, address indexed ownerAddress, address indexed senderAddress);\\n\\n    /**\\n     * @dev Emitted when an owner withdraws funds.\\n     * @param value Amount of tokens.\\n     * @param ownerAddress Owner's address.\\n     */\\n    event FundsWithdrawal(uint256 value, address indexed ownerAddress);\\n\\n    /**\\n     * @dev Emitted when the network fee is updated.\\n     * @param oldFee The old fee\\n     * @param newFee The new fee\\n     */\\n    event NetworkFeeUpdate(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @dev Emitted when transfer fees are withdrawn.\\n     * @param value The amount of tokens withdrawn.\\n     * @param recipient The recipient address.\\n     */\\n    event NetworkFeesWithdrawal(uint256 value, address recipient);\\n\\n    event DeclareOperatorFeePeriodUpdate(uint256 value);\\n\\n    event ExecuteOperatorFeePeriodUpdate(uint256 value);\\n\\n    event LiquidationThresholdPeriodUpdate(uint256 value);\\n\\n    event OperatorFeeIncreaseLimitUpdate(uint256 value);\\n\\n    event ValidatorsPerOperatorLimitUpdate(uint256 value);\\n\\n    event RegisteredOperatorsPerAccountLimitUpdate(uint256 value);\\n\\n    event MinimumBlocksBeforeLiquidationUpdate(uint256 value);\\n\\n    event OperatorMaxFeeIncreaseUpdate(uint256 value);\\n\\n    /** errors */\\n    error ValidatorWithPublicKeyNotExist();\\n    error CallerNotValidatorOwner();\\n    error OperatorWithPublicKeyNotExist();\\n    error CallerNotOperatorOwner();\\n    error FeeTooLow();\\n    error FeeExceedsIncreaseLimit();\\n    error NoPendingFeeChangeRequest();\\n    error ApprovalNotWithinTimeframe();\\n    error NotEnoughBalance();\\n    error BurnRatePositive();\\n    error AccountAlreadyEnabled();\\n    error NegativeBalance();\\n    error BelowMinimumBlockPeriod();\\n    error ExceedManagingOperatorsPerAccountLimit();\\n\\n    /**\\n     * @dev Initializes the contract.\\n     * @param registryAddress_ The registry address.\\n     * @param token_ The network token.\\n     * @param minimumBlocksBeforeLiquidation_ The minimum blocks before liquidation.\\n     * @param declareOperatorFeePeriod_ The period an operator needs to wait before they can approve their fee.\\n     * @param executeOperatorFeePeriod_ The length of the period in which an operator can approve their fee.\\n     */\\n    function initialize(\\n        ISSVRegistry registryAddress_,\\n        IERC20 token_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint64 operatorMaxFeeIncrease_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_\\n    ) external;\\n\\n    /**\\n     * @dev Registers a new operator.\\n     * @param name Operator's display name.\\n     * @param publicKey Operator's public key. Used to encrypt secret shares of validators keys.\\n     */\\n    function registerOperator(\\n        string calldata name,\\n        bytes calldata publicKey,\\n        uint256 fee\\n    ) external returns (uint32);\\n\\n    /**\\n     * @dev Removes an operator.\\n     * @param operatorId Operator's id.\\n     */\\n    function removeOperator(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Set operator's fee change request by public key.\\n     * @param operatorId Operator's id.\\n     * @param operatorFee The operator's updated fee.\\n     */\\n    function declareOperatorFee(uint32 operatorId, uint256 operatorFee) external;\\n\\n    function cancelDeclaredOperatorFee(uint32 operatorId) external;\\n\\n    function executeOperatorFee(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Updates operator's score by public key.\\n     * @param operatorId Operator's id.\\n     * @param score The operators's updated score.\\n     */\\n    function updateOperatorScore(uint32 operatorId, uint32 score) external;\\n\\n    /**\\n     * @dev Registers a new validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator public keys.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     * @param amount Amount of tokens to deposit.\\n     */\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Updates a validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator public keys.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     * @param amount Amount of tokens to deposit.\\n     */\\n    function updateValidator(\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Removes a validator.\\n     * @param publicKey Validator's public key.\\n     */\\n    function removeValidator(bytes calldata publicKey) external;\\n\\n    /**\\n     * @dev Deposits tokens for the sender.\\n     * @param ownerAddress Owners' addresses.\\n     * @param tokenAmount Tokens amount.\\n     */\\n    function deposit(address ownerAddress, uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Withdraw tokens for the sender.\\n     * @param tokenAmount Tokens amount.\\n     */\\n    function withdraw(uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Withdraw total balance to the sender, deactivating their validators if necessary.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Liquidates multiple owners.\\n     * @param ownerAddresses Owners' addresses.\\n     */\\n    function liquidate(address[] calldata ownerAddresses) external;\\n\\n    /**\\n     * @dev Enables msg.sender account.\\n     * @param amount Tokens amount.\\n     */\\n    function reactivateAccount(uint256 amount) external;\\n\\n    /**\\n     * @dev Updates the number of blocks left for an owner before they can be liquidated.\\n     * @param blocks The new value.\\n     */\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external;\\n\\n    /**\\n     * @dev Updates the maximum fee increase in pecentage.\\n     * @param newOperatorMaxFeeIncrease The new value.\\n     */\\n    function updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) external;\\n\\n    function updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) external;\\n\\n    function updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) external;\\n\\n    /**\\n     * @dev Updates the network fee.\\n     * @param fee the new fee\\n     */\\n    function updateNetworkFee(uint256 fee) external;\\n\\n    /**\\n     * @dev Withdraws network fees.\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawNetworkEarnings(uint256 amount) external;\\n\\n    /**\\n     * @dev Gets total balance for an owner.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getAddressBalance(address ownerAddress) external view returns (uint256);\\n\\n    function isLiquidated(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Gets an operator by operator id.\\n     * @param operatorId Operator's id.\\n     */\\n    function getOperatorById(uint32 operatorId)\\n        external view\\n        returns (\\n            string memory,\\n            address,\\n            bytes memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Gets a validator public keys by owner's address.\\n     * @param ownerAddress Owner's Address.\\n     */\\n    function getValidatorsByOwnerAddress(address ownerAddress)\\n        external view\\n        returns (bytes[] memory);\\n\\n    /**\\n     * @dev Gets operators list which are in use by validator.\\n     * @param validatorPublicKey Validator's public key.\\n     */\\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\\n        external view\\n        returns (uint32[] memory);\\n\\n    function getOperatorDeclaredFee(uint32 operatorId) external view returns (uint256, uint256, uint256);\\n\\n    /**\\n     * @dev Gets operator current fee.\\n     * @param operatorId Operator's id.\\n     */\\n    function getOperatorFee(uint32 operatorId) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the network fee for an address.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function addressNetworkFee(address ownerAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the burn rate of an owner, returns 0 if negative.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getAddressBurnRate(address ownerAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Check if an owner is liquidatable.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function isLiquidatable(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the network fee.\\n     */\\n    function getNetworkFee() external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the available network earnings\\n     */\\n    function getNetworkEarnings() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of blocks left for an owner before they can be liquidated.\\n     */\\n    function getLiquidationThresholdPeriod() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the maximum fee increase in pecentage\\n     */\\n     function getOperatorFeeIncreaseLimit() external view returns (uint256);\\n\\n     function getExecuteOperatorFeePeriod() external view returns (uint256);\\n\\n     function getDeclaredOperatorFeePeriod() external view returns (uint256);\\n\\n     function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x3d2ff5c2f5d8c94eb6da63a564cb50cecb4a53c373371b0012f1c48e751e38c7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISSVRegistry.sol\":{\"content\":\"// File: contracts/ISSVRegistry.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\ninterface ISSVRegistry {\\n    struct Oess {\\n        uint32 operatorId;\\n        bytes sharedPublicKey;\\n        bytes encryptedKey;\\n    }\\n\\n    /** errors */\\n    error ExceedRegisteredOperatorsByAccountLimit();\\n    error OperatorDeleted();\\n    error ValidatorAlreadyExists();\\n    error ExceedValidatorLimit();\\n    error OperatorNotFound();\\n    error InvalidPublicKeyLength();\\n    error OessDataStructureInvalid();\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Registers a new operator.\\n     * @param name Operator's display name.\\n     * @param ownerAddress Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee The fee which the operator charges for each block.\\n     */\\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\\n\\n    /**\\n     * @dev removes an operator.\\n     * @param operatorId Operator id.\\n     */\\n    function removeOperator(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param fee New operator fee.\\n     */\\n    function updateOperatorFee(\\n        uint32 operatorId,\\n        uint64 fee\\n    ) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param score New score.\\n     */\\n    function updateOperatorScore(\\n        uint32 operatorId,\\n        uint32 score\\n    ) external;\\n\\n    /**\\n     * @dev Registers a new validator.\\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator ids.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     */\\n    function registerValidator(\\n        address ownerAddress,\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted\\n    ) external;\\n\\n    /**\\n     * @dev removes a validator.\\n     * @param publicKey Validator's public key.\\n     */\\n    function removeValidator(bytes calldata publicKey) external;\\n\\n    function enableOwnerValidators(address ownerAddress) external;\\n\\n    function disableOwnerValidators(address ownerAddress) external;\\n\\n    function isLiquidated(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Gets an operator by operator id.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorById(uint32 operatorId)\\n        external view\\n        returns (\\n            string memory,\\n            address,\\n            bytes memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Returns operators for owner.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getOperatorsByOwnerAddress(address ownerAddress)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operators list which are in use by validator.\\n     * @param validatorPublicKey Validator's public key.\\n     */\\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operator's owner.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\\n\\n    /**\\n     * @dev Gets operator current fee.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorFee(uint32 operatorId)\\n        external view\\n        returns (uint64);\\n\\n    /**\\n     * @dev Gets active validator count.\\n     */\\n    function activeValidatorCount() external view returns (uint32);\\n\\n    /**\\n     * @dev Gets an validator by public key.\\n     * @param publicKey Validator's public key.\\n     */\\n    function validators(bytes calldata publicKey)\\n        external view\\n        returns (\\n            address,\\n            bytes memory,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Gets a validator public keys by owner's address.\\n     * @param ownerAddress Owner's Address.\\n     */\\n    function getValidatorsByAddress(address ownerAddress)\\n        external view\\n        returns (bytes[] memory);\\n\\n    /**\\n     * @dev Get validator's owner.\\n     * @param publicKey Validator's public key.\\n     */\\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\\n\\n    /**\\n     * @dev Get validators amount per operator.\\n     * @param operatorId Operator public key\\n     */\\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\\n}\",\"keccak256\":\"0xc43589f0f38f8dcd2b808071bc46162081b6198be4baee9f44d5ff1556ffb10f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040526801bc16d674ec80000060a0908152503480156200002157600080fd5b50604051620048a7380380620048a78339818101604052810190620000479190620004a2565b620000676200005b6200023b60201b60201c565b6200024360201b60201c565b6001808190555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250506000604051620001379062000307565b604051809103906000f08015801562000154573d6000803e3d6000fd5b50905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160079060046200022d92919062000315565b505050505050505062000679565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611bf58062002cb283390190565b826004600701600890048101928215620003ac5791602002820160005b838211156200037857835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030262000332565b8015620003aa5782816101000a81549063ffffffff021916905560040160208160030104928301926001030262000378565b505b509050620003bb9190620003bf565b5090565b5b80821115620003da576000816000905550600101620003c0565b5090565b6000620003f5620003ef8462000562565b62000539565b905080828560208602820111156200040c57600080fd5b60005b858110156200044057816200042588826200048b565b8452602084019350602083019250506001810190506200040f565b5050509392505050565b6000815190506200045b8162000645565b92915050565b600082601f8301126200047357600080fd5b600462000482848285620003de565b91505092915050565b6000815190506200049c816200065f565b92915050565b6000806000806000806101208789031215620004bd57600080fd5b6000620004cd89828a016200044a565b9650506020620004e089828a016200044a565b9550506040620004f389828a016200044a565b94505060606200050689828a016200044a565b93505060806200051989828a016200044a565b92505060a06200052c89828a0162000461565b9150509295509295509295565b60006200054562000558565b9050620005538282620005cf565b919050565b6000604051905090565b600067ffffffffffffffff82111562000580576200057f62000605565b5b602082029050919050565b600062000598826200059f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b620005da8262000634565b810181811067ffffffffffffffff82111715620005fc57620005fb62000605565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000650816200058b565b81146200065c57600080fd5b50565b6200066a81620005bf565b81146200067657600080fd5b50565b60805160601c60a051612609620006a960003960008181610af20152610c9d01526000610c6101526126096000f3fe60806040526004361061012e5760003560e01c80638da5cb5b116100ab578063cc9fbb761161006f578063cc9fbb76146103af578063df8af7c2146103da578063e6ebe20c14610405578063ed97013b14610430578063f2fde38b14610459578063f8d0c40b146104825761013e565b80638da5cb5b146102ca578063b7ab4db5146102f5578063bbadc93a14610320578063bf3a6c0a1461035d578063c95ef784146103865761013e565b80633a4b66f1116100f25780633a4b66f11461022a5780634f143e4f146102345780635d3eea911461025f578063715018a6146102885780637b4bc9351461029f5761013e565b806307d0e5401461014357806307dc739f1461016e5780631b7e5127146101ab5780632601d3c7146101d457806327a099d8146101ff5761013e565b3661013e5761013c346104ad565b005b600080fd5b34801561014f57600080fd5b506101586104c9565b6040516101659190611d27565b60405180910390f35b34801561017a57600080fd5b5061019560048036038101906101909190611951565b6104ef565b6040516101a29190611f23565b60405180910390f35b3480156101b757600080fd5b506101d260048036038101906101cd9190611951565b61059b565b005b3480156101e057600080fd5b506101e9610603565b6040516101f69190611d27565b60405180910390f35b34801561020b57600080fd5b50610214610629565b6040516102219190611dc4565b60405180910390f35b6102326106a0565b005b34801561024057600080fd5b506102496108b4565b6040516102569190611d27565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190611951565b6108da565b005b34801561029457600080fd5b5061029d610adc565b005b3480156102ab57600080fd5b506102b4610af0565b6040516102c19190611fe0565b60405180910390f35b3480156102d657600080fd5b506102df610b14565b6040516102ec9190611d27565b60405180910390f35b34801561030157600080fd5b5061030a610b3d565b6040516103179190611da2565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190611735565b610c16565b6040516103549190611fe0565b60405180910390f35b34801561036957600080fd5b50610384600480360381019061037f9190611898565b610c5f565b005b34801561039257600080fd5b506103ad60048036038101906103a891906117b0565b610d59565b005b3480156103bb57600080fd5b506103c4610fe0565b6040516103d19190611d27565b60405180910390f35b3480156103e657600080fd5b506103ef611006565b6040516103fc9190611f45565b60405180910390f35b34801561041157600080fd5b5061041a61102c565b6040516104279190611fe0565b60405180910390f35b34801561043c57600080fd5b506104576004803603810190610452919061175e565b6110d8565b005b34801561046557600080fd5b50610480600480360381019061047b9190611735565b61112c565b005b34801561048e57600080fd5b506104976111b0565b6040516104a49190611d27565b60405180910390f35b80600b60008282546104bf9190612197565b9250508190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600881815481106104ff57600080fd5b90600052602060002001600091509050805461051a90612340565b80601f016020809104026020016040519081016040528092919081815260200182805461054690612340565b80156105935780601f1061056857610100808354040283529160200191610593565b820191906000526020600020905b81548152906001019060200180831161057657829003601f168201915b505050505081565b6105a36111d6565b80600a81905550600060206008805490506105be919061221e565b60206008805490506105d0919061221e565b600b54600a546105e09190612197565b6105ea9190612197565b6105f491906121ed565b90506105ff81611254565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106316113e7565b6007600480602002604051908101604052809291908260048015610696576020028201916000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116106595790505b5050505050905090565b600034116106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da90611fc0565b60405180910390fd5b6000670de0b6b3a7640000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663872697296040518163ffffffff1660e01b815260040160206040518083038186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e919061197a565b34610799919061221e565b6107a391906121ed565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610802929190611d79565b600060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b505050507f8c265adcfa641899d6632b86254dda7a76f27701f1d21a732621d51f2328c4603334604051610865929190611d79565b60405180910390a134600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161093993929190611d42565b602060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190611787565b506000670de0b6b3a7640000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663872697296040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ff57600080fd5b505afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a37919061197a565b83610a4291906121ed565b610a4c919061221e565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a94573d6000803e3d6000fd5b50600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b610ae46111d6565b610aee600061131b565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606008805480602002602001604051908101604052809291908181526020016000905b82821015610c0d578382906000526020600020018054610b8090612340565b80601f0160208091040260200160405190810160405280929190818152602001828054610bac90612340565b8015610bf95780601f10610bce57610100808354040283529160200191610bf9565b820191906000526020600020905b815481529060010190602001808311610bdc57829003601f168201915b505050505081526020019060010190610b61565b50505050905090565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663228951187f0000000000000000000000000000000000000000000000000000000000000000898989898989896040518963ffffffff1660e01b8152600401610ce59796959493929190611ec3565b6000604051808303818588803b158015610cfe57600080fd5b505af1158015610d12573d6000803e3d6000fd5b50505050507f144679c9e19454710222d38e13b257573a15b6ca6a4d10a1254ebc2480cb68638787604051610d48929190611ddf565b60405180910390a150505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de090611f80565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610e68929190611d79565b602060405180830381600087803b158015610e8257600080fd5b505af1158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba9190611787565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e40cb19d8a8a8a8a8a8a8a8a8a6040518a63ffffffff1660e01b8152600401610f2699989796959493929190611e4c565b600060405180830381600087803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b505050506008898990918060018154018082558091505060019003906000526020600020016000909192909192909192909192509190610f95929190611409565b507f79d193e1e9800cea5c20f374c2a12518fb3d49d1471cfeb268778ce9f3e9436a8989878785604051610fcd959493929190611e03565b60405180910390a1505050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663872697296040518163ffffffff1660e01b815260040160206040518083038186803b15801561109757600080fd5b505afa1580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf919061197a565b90508091505090565b6110e06111d6565b8060079060046110f192919061148f565b507fa31d33307023a78b2b477792a91efbed5ee91448638292c891e81233cb6108f8816040516111219190611dc4565b60405180910390a150565b6111346111d6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90611f60565b60405180910390fd5b6111ad8161131b565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111de6113df565b73ffffffffffffffffffffffffffffffffffffffff166111fc610b14565b73ffffffffffffffffffffffffffffffffffffffff1614611252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124990611fa0565b60405180910390fd5b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341640201826040518263ffffffff1660e01b81526004016112af9190611fe0565b600060405180830381600087803b1580156112c957600080fd5b505af11580156112dd573d6000803e3d6000fd5b505050507fce44720b7462058f31ddecab3daa427921e5975d9acb555f043682dada866569816040516113109190611fe0565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060800160405280600490602082028036833780820191505090505090565b82805461141590612340565b90600052602060002090601f016020900481019282611437576000855561147e565b82601f1061145057803560ff191683800117855561147e565b8280016001018555821561147e579182015b8281111561147d578235825591602001919060010190611462565b5b50905061148b9190611532565b5090565b8260046007016008900481019282156115215791602002820160005b838211156114ef57835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026114ab565b801561151f5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026114ef565b505b50905061152e9190611532565b5090565b5b8082111561154b576000816000905550600101611533565b5090565b600061156261155d84612020565b611ffb565b9050808285602086028201111561157857600080fd5b60005b858110156115a8578161158e8882611720565b84526020840193506020830192505060018101905061157b565b5050509392505050565b6000813590506115c181612560565b92915050565b60008083601f8401126115d957600080fd5b8235905067ffffffffffffffff8111156115f257600080fd5b60208301915083602082028301111561160a57600080fd5b9250929050565b600082601f83011261162257600080fd5b600461162f84828561154f565b91505092915050565b60008083601f84011261164a57600080fd5b8235905067ffffffffffffffff81111561166357600080fd5b60208301915083602082028301111561167b57600080fd5b9250929050565b60008151905061169181612577565b92915050565b6000813590506116a68161258e565b92915050565b60008083601f8401126116be57600080fd5b8235905067ffffffffffffffff8111156116d757600080fd5b6020830191508360018202830111156116ef57600080fd5b9250929050565b600081359050611705816125a5565b92915050565b60008151905061171a816125a5565b92915050565b60008135905061172f816125bc565b92915050565b60006020828403121561174757600080fd5b6000611755848285016115b2565b91505092915050565b60006080828403121561177057600080fd5b600061177e84828501611611565b91505092915050565b60006020828403121561179957600080fd5b60006117a784828501611682565b91505092915050565b600080600080600080600080600060a08a8c0312156117ce57600080fd5b60008a013567ffffffffffffffff8111156117e857600080fd5b6117f48c828d016116ac565b995099505060208a013567ffffffffffffffff81111561181357600080fd5b61181f8c828d01611638565b975097505060408a013567ffffffffffffffff81111561183e57600080fd5b61184a8c828d016115c7565b955095505060608a013567ffffffffffffffff81111561186957600080fd5b6118758c828d016115c7565b935093505060806118888c828d016116f6565b9150509295985092959850929598565b60008060008060008060006080888a0312156118b357600080fd5b600088013567ffffffffffffffff8111156118cd57600080fd5b6118d98a828b016116ac565b9750975050602088013567ffffffffffffffff8111156118f857600080fd5b6119048a828b016116ac565b9550955050604088013567ffffffffffffffff81111561192357600080fd5b61192f8a828b016116ac565b935093505060606119428a828b01611697565b91505092959891949750929550565b60006020828403121561196357600080fd5b6000611971848285016116f6565b91505092915050565b60006020828403121561198c57600080fd5b600061199a8482850161170b565b91505092915050565b60006119b0848484611ba2565b90509392505050565b60006119c58383611bfc565b905092915050565b60006119d98383611d18565b60208301905092915050565b6119ee81612278565b82525050565b6000611a0083856120c9565b935083602084028501611a1284612046565b8060005b87811015611a58578484038952611a2d8284612129565b611a388682846119a3565b9550611a4384612095565b935060208b019a505050600181019050611a16565b50829750879450505050509392505050565b6000611a7582612074565b611a7f81856120c9565b935083602082028501611a9185612050565b8060005b85811015611acd5784840389528151611aae85826119b9565b9450611ab9836120a2565b925060208a01995050600181019050611a95565b50829750879550505050505092915050565b611ae88161207f565b611af281846120da565b9250611afd82612060565b8060005b83811015611b2e578151611b1587826119cd565b9650611b20836120af565b925050600181019050611b01565b505050505050565b6000611b4283856120e5565b9350611b4d8261206a565b8060005b85811015611b8657611b638284612180565b611b6d88826119cd565b9750611b78836120bc565b925050600181019050611b51565b5085925050509392505050565b611b9c81612296565b82525050565b6000611bae83856120f6565b9350611bbb8385846122fe565b611bc48361245f565b840190509392505050565b6000611bdb8385612107565b9350611be88385846122fe565b611bf18361245f565b840190509392505050565b6000611c078261208a565b611c1181856120f6565b9350611c2181856020860161230d565b611c2a8161245f565b840191505092915050565b6000611c408261208a565b611c4a8185612107565b9350611c5a81856020860161230d565b611c638161245f565b840191505092915050565b611c77816122da565b82525050565b6000611c8a602683612118565b9150611c9582612470565b604082019050919050565b6000611cad602b83612118565b9150611cb8826124bf565b604082019050919050565b6000611cd0602083612118565b9150611cdb8261250e565b602082019050919050565b6000611cf3601783612118565b9150611cfe82612537565b602082019050919050565b611d12816122c0565b82525050565b611d21816122ca565b82525050565b6000602082019050611d3c60008301846119e5565b92915050565b6000606082019050611d5760008301866119e5565b611d6460208301856119e5565b611d716040830184611d09565b949350505050565b6000604082019050611d8e60008301856119e5565b611d9b6020830184611d09565b9392505050565b60006020820190508181036000830152611dbc8184611a6a565b905092915050565b6000608082019050611dd96000830184611adf565b92915050565b60006020820190508181036000830152611dfa818486611bcf565b90509392505050565b60006060820190508181036000830152611e1e818789611bcf565b90508181036020830152611e338185876119f4565b9050611e426040830184611d09565b9695505050505050565b600060a0820190508181036000830152611e67818b8d611bcf565b90508181036020830152611e7c81898b611b36565b90508181036040830152611e918187896119f4565b90508181036060830152611ea68185876119f4565b9050611eb56080830184611d09565b9a9950505050505050505050565b60006080820190508181036000830152611ede81898b611bcf565b90508181036020830152611ef3818789611bcf565b90508181036040830152611f08818587611bcf565b9050611f176060830184611b93565b98975050505050505050565b60006020820190508181036000830152611f3d8184611c35565b905092915050565b6000602082019050611f5a6000830184611c6e565b92915050565b60006020820190508181036000830152611f7981611c7d565b9050919050565b60006020820190508181036000830152611f9981611ca0565b9050919050565b60006020820190508181036000830152611fb981611cc3565b9050919050565b60006020820190508181036000830152611fd981611ce6565b9050919050565b6000602082019050611ff56000830184611d09565b92915050565b6000612005612016565b90506120118282612372565b919050565b6000604051905090565b600067ffffffffffffffff82111561203b5761203a612430565b5b602082029050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050919050565b600081519050919050565b600060049050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000808335600160200384360303811261214257600080fd5b83810192508235915060208301925067ffffffffffffffff82111561216657600080fd5b60018202360384131561217857600080fd5b509250929050565b600061218f6020840184611720565b905092915050565b60006121a2826122c0565b91506121ad836122c0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121e2576121e16123a3565b5b828201905092915050565b60006121f8826122c0565b9150612203836122c0565b925082612213576122126123d2565b5b828204905092915050565b6000612229826122c0565b9150612234836122c0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561226d5761226c6123a3565b5b828202905092915050565b6000612283826122a0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006122e5826122ec565b9050919050565b60006122f7826122a0565b9050919050565b82818337600083830152505050565b60005b8381101561232b578082015181840152602081019050612310565b8381111561233a576000848401525b50505050565b6000600282049050600182168061235857607f821691505b6020821081141561236c5761236b612401565b5b50919050565b61237b8261245f565b810181811067ffffffffffffffff8211171561239a57612399612430565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c792077686974656c697374656420616464726573732063616e2073756260008201527f6d697420746865206b6579000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e2774207374616b65207a65726f20616d6f756e74000000000000000000600082015250565b61256981612278565b811461257457600080fd5b50565b6125808161228a565b811461258b57600080fd5b50565b61259781612296565b81146125a257600080fd5b50565b6125ae816122c0565b81146125b957600080fd5b50565b6125c5816122ca565b81146125d057600080fd5b5056fea2646970667358221220a41aca53a91d19e6a5461c951c62ed79a9f9627b7cd6a2952644679badee176364736f6c634300080400336080604052670de0b6b3a76400006007553480156200001d57600080fd5b506040518060400160405280601d81526020017f646563656e7472616c697a65207374616b696e672077697468207373760000008152506040518060400160405280600681526020017f73737645544800000000000000000000000000000000000000000000000000008152508160039080519060200190620000a2929190620001f3565b508060049080519060200190620000bb929190620001f3565b505050620000de620000d26200012560201b60201c565b6200012d60201b60201c565b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000308565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200020190620002a3565b90600052602060002090601f01602090048101928262000225576000855562000271565b82601f106200024057805160ff191683800117855562000271565b8280016001018555821562000271579182015b828111156200027057825182559160200191906001019062000253565b5b50905062000280919062000284565b5090565b5b808211156200029f57600081600090555060010162000285565b5090565b60006002820490506001821680620002bc57607f821691505b60208210811415620002d357620002d2620002d9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6118dd80620003186000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b41146102d1578063a457c2d7146102ef578063a9059cbb1461031f578063dd62ed3e1461034f578063f2fde38b1461037f57610116565b806370a082311461025b578063715018a61461028b57806387269729146102955780638da5cb5b146102b357610116565b806323b872dd116100e957806323b872dd146101a5578063313ce567146101d557806339509351146101f357806340c10f1914610223578063416402011461023f57610116565b806306fdde031461011b5780630754617214610139578063095ea7b31461015757806318160ddd14610187575b600080fd5b61012361039b565b60405161013091906112a2565b60405180910390f35b61014161042d565b60405161014e919061126c565b60405180910390f35b610171600480360381019061016c9190611034565b610453565b60405161017e9190611287565b60405180910390f35b61018f610476565b60405161019c9190611404565b60405180910390f35b6101bf60048036038101906101ba9190610fe5565b610480565b6040516101cc9190611287565b60405180910390f35b6101dd6104af565b6040516101ea919061141f565b60405180910390f35b61020d60048036038101906102089190611034565b6104b8565b60405161021a9190611287565b60405180910390f35b61023d60048036038101906102389190611034565b6104ef565b005b61025960048036038101906102549190611070565b610505565b005b61027560048036038101906102709190610f80565b610517565b6040516102829190611404565b60405180910390f35b61029361055f565b005b61029d610573565b6040516102aa9190611404565b60405180910390f35b6102bb610579565b6040516102c8919061126c565b60405180910390f35b6102d96105a3565b6040516102e691906112a2565b60405180910390f35b61030960048036038101906103049190611034565b610635565b6040516103169190611287565b60405180910390f35b61033960048036038101906103349190611034565b6106ac565b6040516103469190611287565b60405180910390f35b61036960048036038101906103649190610fa9565b6106cf565b6040516103769190611404565b60405180910390f35b61039960048036038101906103949190610f80565b610756565b005b6060600380546103aa90611534565b80601f01602080910402602001604051908101604052809291908181526020018280546103d690611534565b80156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b5050505050905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061045e6107da565b905061046b8185856107e2565b600191505092915050565b6000600254905090565b60008061048b6107da565b90506104988582856109ad565b6104a3858585610a39565b60019150509392505050565b60006012905090565b6000806104c36107da565b90506104e48185856104d585896106cf565b6104df9190611456565b6107e2565b600191505092915050565b6104f7610cb1565b6105018282610d2f565b5050565b61050d610cb1565b8060078190555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610567610cb1565b6105716000610e86565b565b60075481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105b290611534565b80601f01602080910402602001604051908101604052809291908181526020018280546105de90611534565b801561062b5780601f106106005761010080835404028352916020019161062b565b820191906000526020600020905b81548152906001019060200180831161060e57829003601f168201915b5050505050905090565b6000806106406107da565b9050600061064e82866106cf565b905083811015610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a906113c4565b60405180910390fd5b6106a082868684036107e2565b60019250505092915050565b6000806106b76107da565b90506106c4818585610a39565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61075e610cb1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c5906112e4565b60405180910390fd5b6107d781610e86565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610849906113a4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b990611304565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109a09190611404565b60405180910390a3505050565b60006109b984846106cf565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a335781811015610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90611324565b60405180910390fd5b610a3284848484036107e2565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa090611384565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b10906112c4565b60405180910390fd5b610b24838383610f4c565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190611344565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c989190611404565b60405180910390a3610cab848484610f51565b50505050565b610cb96107da565b73ffffffffffffffffffffffffffffffffffffffff16610cd7610579565b73ffffffffffffffffffffffffffffffffffffffff1614610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2490611364565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d96906113e4565b60405180910390fd5b610dab60008383610f4c565b8060026000828254610dbd9190611456565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e6e9190611404565b60405180910390a3610e8260008383610f51565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081359050610f6581611879565b92915050565b600081359050610f7a81611890565b92915050565b600060208284031215610f9257600080fd5b6000610fa084828501610f56565b91505092915050565b60008060408385031215610fbc57600080fd5b6000610fca85828601610f56565b9250506020610fdb85828601610f56565b9150509250929050565b600080600060608486031215610ffa57600080fd5b600061100886828701610f56565b935050602061101986828701610f56565b925050604061102a86828701610f6b565b9150509250925092565b6000806040838503121561104757600080fd5b600061105585828601610f56565b925050602061106685828601610f6b565b9150509250929050565b60006020828403121561108257600080fd5b600061109084828501610f6b565b91505092915050565b6110a2816114ac565b82525050565b6110b1816114be565b82525050565b60006110c28261143a565b6110cc8185611445565b93506110dc818560208601611501565b6110e5816115c4565b840191505092915050565b60006110fd602383611445565b9150611108826115d5565b604082019050919050565b6000611120602683611445565b915061112b82611624565b604082019050919050565b6000611143602283611445565b915061114e82611673565b604082019050919050565b6000611166601d83611445565b9150611171826116c2565b602082019050919050565b6000611189602683611445565b9150611194826116eb565b604082019050919050565b60006111ac602083611445565b91506111b78261173a565b602082019050919050565b60006111cf602583611445565b91506111da82611763565b604082019050919050565b60006111f2602483611445565b91506111fd826117b2565b604082019050919050565b6000611215602583611445565b915061122082611801565b604082019050919050565b6000611238601f83611445565b915061124382611850565b602082019050919050565b611257816114ea565b82525050565b611266816114f4565b82525050565b60006020820190506112816000830184611099565b92915050565b600060208201905061129c60008301846110a8565b92915050565b600060208201905081810360008301526112bc81846110b7565b905092915050565b600060208201905081810360008301526112dd816110f0565b9050919050565b600060208201905081810360008301526112fd81611113565b9050919050565b6000602082019050818103600083015261131d81611136565b9050919050565b6000602082019050818103600083015261133d81611159565b9050919050565b6000602082019050818103600083015261135d8161117c565b9050919050565b6000602082019050818103600083015261137d8161119f565b9050919050565b6000602082019050818103600083015261139d816111c2565b9050919050565b600060208201905081810360008301526113bd816111e5565b9050919050565b600060208201905081810360008301526113dd81611208565b9050919050565b600060208201905081810360008301526113fd8161122b565b9050919050565b6000602082019050611419600083018461124e565b92915050565b6000602082019050611434600083018461125d565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611461826114ea565b915061146c836114ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114a1576114a0611566565b5b828201905092915050565b60006114b7826114ca565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561151f578082015181840152602081019050611504565b8381111561152e576000848401525b50505050565b6000600282049050600182168061154c57607f821691505b602082108114156115605761155f611595565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b611882816114ac565b811461188d57600080fd5b50565b611899816114ea565b81146118a457600080fd5b5056fea26469706673582212201cce6ab2d14d97d03553727865b510ffaa9e717daf2b0c0be391983e9827ef5264736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositShares(bytes,uint32[],bytes[],bytes[],uint256)": {
        "details": "Callable by the whitelisted address",
        "params": {
          "_amount": ": Amount of tokens to be deposited",
          "_operatorIds": ": IDs of the validator's operators",
          "_pubkey": ": Public key of the validator",
          "_sharesEncrypted": ": Encrypted shares",
          "_sharesPublicKeys": ": Public keys of the shares"
        }
      },
      "depositValidator(bytes,bytes,bytes,bytes32)": {
        "details": "these params together are known as the DepositData",
        "params": {
          "_deposit_data_root": ": The SHA-256 hash of the SSZ-encoded DepositData object",
          "_pubkey": ": Public key of the validator",
          "_signature": ": BLS12-381 signature of the deposit data",
          "_withdrawal_credentials": ": Withdrawal public key of the validator"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unStake(uint256)": {
        "params": {
          "_amount": ": Amount to be unstaked"
        }
      },
      "updateBeaconRewards(uint256)": {
        "details": "Update share price of the staking pool",
        "params": {
          "_newBeaconRewards": ": The new beacon rewards amount"
        }
      },
      "updateOperators(uint32[4])": {
        "details": "Update operators",
        "params": {
          "_newOperators": ": Array of the the new operators Ids"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositShares(bytes,uint32[],bytes[],bytes[],uint256)": {
        "notice": "Deposit shares for a validator"
      },
      "depositValidator(bytes,bytes,bytes,bytes32)": {
        "notice": "Deposit a validator to the deposit contract"
      },
      "getOperators()": {
        "notice": "Get operator ids, check operators here https://explorer.ssv.network/"
      },
      "getShareprice()": {
        "notice": "Get share price"
      },
      "getUserStake(address)": {
        "notice": "Get user's staked amount"
      },
      "getValidators()": {
        "notice": "Get validators array"
      },
      "stake()": {
        "notice": "Stake tokens"
      },
      "unStake(uint256)": {
        "notice": "Unstake tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1023,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1139,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3083,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "WhitelistKeyGenerator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3085,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "WITHDRAWAL_ADDRESS",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3091,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "ssvETH",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SSVETH)3069"
      },
      {
        "astId": 3098,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "SSV_TOKEN_ADDR",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3100,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "SSV_CONTRACT_ADDR",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3104,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "OperatorIDs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint32)4_storage"
      },
      {
        "astId": 3107,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "Validators",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 3109,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "Oracle_address",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3111,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "beaconRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3113,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "executionRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3117,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "userStake",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)4_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[4]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(SSVETH)3069": {
        "encoding": "inplace",
        "label": "contract SSVETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}